import"./pinia.js";import{J as e}from"./vue.js";const a=e({components:{},template:`<div class="fv-mardown-html"><div class="fv-mardown-main"><h1 id="Vue 3 + Typescript + Vite" tabindex="-1"><a class="header-anchor" href="#Vue 3 + Typescript + Vite">#</a> Vue 3 + Typescript + Vite</h1>
<p>This template should help get you started developing with Vue 3 and Typescript in Vite. The template uses Vue 3 <code class="fv-code_inline">&lt;script setup&gt;</code> SFCs, check out the <a href="https://v3.vuejs.org/api/sfc-script-setup.html#sfc-script-setup" target="_blank">script setup docs</a> to learn more.</p>
<h2 id="Recommended IDE Setup" tabindex="-1"><a class="header-anchor" href="#Recommended IDE Setup">#</a> Recommended IDE Setup</h2>
<ul>
<li><a href="https://code.visualstudio.com/" target="_blank">VSCode</a> + <a href="https://marketplace.visualstudio.com/items?itemName=johnsoncodehk.volar" target="_blank">Volar</a></li>
</ul>
<h2 id="Type Support For .vue Imports in TS" tabindex="-1"><a class="header-anchor" href="#Type Support For .vue Imports in TS">#</a> Type Support For <code class="fv-code_inline">.vue</code> Imports in TS</h2>
<p>Since TypeScript cannot handle type information for <code class="fv-code_inline">.vue</code> imports, they are shimmed to be a generic Vue component type by default. In most cases this is fine if you don\u2019t really care about component prop types outside of templates. However, if you wish to get actual prop types in <code class="fv-code_inline">.vue</code> imports (for example to get props validation when using manual <code class="fv-code_inline">h(...)</code> calls), you can enable Volar\u2019s <code class="fv-code_inline">.vue</code> type support plugin by running <code class="fv-code_inline">Volar: Switch TS Plugin on/off</code> from VSCode command palette.</p>
</div></div><PagesRouter  docPath="README.md" mapType="docs" docRepo="tp-indent2em" pagesName="README_t_hztcyn1653320525474_p_" />`});export{a as default};
